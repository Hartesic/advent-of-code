from colorama import Back, Style
from getpass import getpass

my_input = """
.....................#................#...#.....#.................................................#...........#...................
.............#....#.#.................................#....................................................#.........#............
...........................................#...................................................................#......#...........
....................................................#................#.......#.............#......................................
..........................................#...##.#....................................#....#.........#............................
....................................#.............................................#.......#................#.......###............
..##.......#......................#..#........................................................#...................#...............
.....#...........#..................................#..............#...........#..................................................
..........#..#......#.....#..#........#..................#.............................#...........................##............#
..............................#....#..........#...................................................................................
.......#.#..........................#.........#...##..........................................................#.#....#...#.#......
..............................................................................................................#.........#.........
....................#......#.....#...............................#..#.........#........................#.#.....#..................
......................................##.................#.....................#............#.#.#..............#...............#..
#...........................#..................#.....#..#..#.............#......#.........#........#........#.#.#.................
.......#.............#....................#.................#...#.........#.......#................#......#................#....#.
...............#.................................................#................#..................#..................#.........
.........#....................#..............................#..............#..............#.......#....................#......#..
....................................##.............................................................................#.#............
.....................................................................#...#.#........................#....#....#......#............
.....#...........................#.........#.............................................................................#........
...............#.#.........#...............##..............................................#............#.........................
#..............#....##....#............#...#.#............................#...................................#..#..............#.
........#.........#...........................................................#..............................................#....
.........................................................................................#.......#................................
................................#.........#..........#..#.......................................#..............................#..
........................#.................................................................................##........#.............
.....#.....................#.....................#...#...........#.........................#......................................
....................................................................................................#.............................
.........#...................................#...#................................................................................
..............#............##......#..............#......................................................#.....................#..
..#.......#............................................................................#...#.....................#................
..................#.....................##..#.................#..........#.....#........#.............#............#...........#..
...................................#.....#..............#..#.............................................#.....#......#....#......
......#....#.....................................................#................#...............................#...............
..#.#..................#.......#......#.............#.......#.....................................................................
......##...........................#.................#.....#........................................#.............................
...#......................#...............##......#.......................#..........#.................#.......#.......#..........
...........................#.............................................................#.#................#......#..#...........
..#.............#.....#.........................................................#..........#......................................
...........#.........#..........................................................................#..............#..................
.#.......................................................#.#.......#............................................#.#...............
..........................#....#...............#............................................................#.........#...........
.........................##.........#^.....................................................#......................................
........#.......#.................................................................................................#.......#.......
..........#..................................##..#.......................#.................#....................................#.
...................................#..#.....#.#.............#.....#.................##..............#.............................
...........................................................#.........................................................#......#.....
............#.........................#.........#.................................................................................
................#.........................#...............................#.......................................................
.....................#.......#.................#.#..............#...............#.................................................
...#......................#...............................#.......#.......#..........................................#............
.........#..#............................................................................................#........................
..............................................................................................#.#...........#.........#...........
..#..............#...............#.................................................................#.....#........................
................#..........#.......##..............#..............................#.##......#.....................................
.........#....#.#..................................................................#...................#..........................
#...#............#...............................................................................................................#
........#.....#.#................#.........................#.........#...........................##........................#.#....
......#...#.....................................................................#...........................#.....................
........#.........#.....................#............................................................................#..........#.
.................................................................#....................#.........#..#...#.##.......................
..........#...........................##.......#...................................................................#.#............
.......................................................................................#.................#..#.#...................
............................................................................................#.............#.......................
........................#........................#.................#..........................#...........................#.......
.....................................#......#.................................#..........#........................................
....#...............................#........#............................#............................#..........................
..........#................#.#....................................................................................................
#........................................................................#..........................................#.....#.......
.#....................................#.........#..#.#...................................................#........................
...................#....................#..............#..................#.................................................#.....
.........................................................................#..........................#............#................
........................................................#.................................................................#.......
#...........................................#..............#............................................................#..#......
...............#..............#...............#............................#.......#.............#....#...........................
......#............#.#...........................................................................................#................
..................#..#.......#..............................#.............................#........#.......#.........#...........#
...............#.....................................#......#....................................#..........#................#....
.............................................#...............#...........#........#.............#...#.......................##....
.....#..................#...........#..............#.............#....................................#.........#.................
........................#.......................................................................#...........#.....................
.............................#.....................................................#........##....................................
...........#.................................................................................#.........#....#....#.....#..........
.....#..................................................................................#.....#.............................#....#
..#........#...............#.........................................................#.......#........................#.........#.
..............................................#....................##..............................#..........#.......#.#......#..
.......................#......................................................#........#..........................................
..#.........................................#...........#.........................................................#...............
..........................#.......#...............................................................................................
.........#.....................#..............................................#...............#...................................
..............................................#.........#..........#....#..............#..........................................
......................................#.........#............#........................................................#...#.......
...........................................#.....#..................#.....#..........#...............#...#........................
.......................#........#..........................................................#.......#.........#............#....#..
..........#.....................................................................#...#.......#.......#.........#.....#.............
.............................#..#...............................#....#.................................................#..#.......
.#.............#................##......................................#...#..............................#............#.........
....#.........#....#..................................................................................#...............#.....#.....
......#................................................#.....#.#.......#.......#....................#.............#...............
...............................#..........#........................#.......................................................#.....#
...............#.......................................................................................#......#.......#..#.#.#....
..#....#.........................................................................#...................#....................##......
...........................#......#.................#...#..........................#..............................................
......#..........#...#............#....#..........................................................................................
.......................#......#...............#..#......................#......#........................#........................#
.#............#................................#............#....................#.................................#..............
................#.........#.................###............#..#...............#..............................#...#................
......#..........................#....#............#.................#...................................................#........
..........................#...#.............#........#......................#......................#.#.............#............#.
............................#................#....................#....##.......................#........#..........##.....#......
..............#.#...................#.#.............................................#..........#......#...........................
.....#.........................#...........#...#......................................#......#..........#.#....#.##...............
.............##.##....................................................................#.#..............#.......#.....#..#...#.....
#.......#..................#.........#...................#................#..##...............##...............#..................
..............#....#........#.....#.................................#....#....#...#.......................................#.......
...........................#......#..............................#......................#.........................................
.................#.#..........##................#...#..................................#..............#.....#.................#...
..........................#..............#..#......................#.......................#...........##.........................
..#...................#..........#.......#..........#...............................#.....................#.......................
............#......................#................#....#......................#.................................................
...........................................#........#.........#..........#..................#....#.........#....##................
..........#........................#.#...............#............................................#........#...#.....#............
...............#..........#..........#...#.....#........................#..............#..#.....................##................
...#.......................##.....................#................................................#..#............#..............
....#........#..#...#.#............................#................#................#............................................
...........#....................#.....#.........................#....................#.............#....#.........#...#........##.
.#.....#.................##............#...............................#...............#.......................##.................
..............................#................................#.............................#................#.#.................
............##..............#........#.......#...................#..........................#.............###..#...#............#.
""".strip()
input_grid = [line for line in my_input.split('\n')]
obstacle_marker = '#'
obstacle_positions = [(y, x,)
                      for y, line in enumerate(input_grid)
                      for x, char in enumerate(line)
                      if char == obstacle_marker]
guard_markers = set(['v', '<', '>', '^'])

LINE_UP = '\033[1A'
LINE_CLEAR = '\x1b[2K'


def get_guard_initial_status():
    for y, line in enumerate(input_grid):
        for x, char in enumerate(line):
            if char in guard_markers:
                return (y, x,), char


def print_map(height: int, width: int,
              guard_position: tuple[int, int],
              guard_direction: str,
              next_visited_places: list[tuple[int, int]],
              already_visited_places: set[tuple[int, int]],
              new_possible_obstacles: set[tuple[int, int]]):
    """
    Display the input while highlighting the next places the guard
    will visit until the next obstacle

    Useful to see the algorithm in action.
    """
    total_already_visited_places = len(already_visited_places)
    total_next_visited_places = len(next_visited_places)
    total_included_visited_places = len(
        already_visited_places.intersection(next_visited_places))
    next_total = (total_already_visited_places
                  + total_next_visited_places
                  - total_included_visited_places)

    all_y = sorted([pos[0] for pos in next_visited_places])
    all_x = sorted([pos[1] for pos in next_visited_places])
    x_legend_1 = ''.join([(str(x - all_x[0] + 1)[0]
                           if x in all_x
                           else ' ')
                          for x in range(height)])
    x_legend_2 = ''.join([(str(x - all_x[0] + 1)[1]
                           if x in all_x and x - all_x[0] + 1 > 9
                           else ' ')
                          for x in range(height)])

    lines = []
    for h in range(height):
        line = []
        for w in range(width):
            current_pos = (h, w,)
            if guard_position == current_pos:
                line.append(guard_direction)
                continue
            if current_pos in obstacle_positions:
                line.append(obstacle_marker)
                continue
            if current_pos in new_possible_obstacles:
                line.append(Back.CYAN + 'O' + Style.RESET_ALL)
                continue
            if current_pos in already_visited_places:
                line.append(Back.BLUE + '.' + Style.RESET_ALL)
                continue
            if current_pos in next_visited_places:
                line.append(Back.YELLOW + '.' + Style.RESET_ALL)
                continue
            line.append('.')
        if h in all_y:
            line.append(' ' + str(h - all_y[0] + 1))
        lines.append(''.join(line))

    print(x_legend_1)
    print(x_legend_2, end='\n\n')
    for line in lines:
        print(line)

    print("Total visited places:", total_already_visited_places,
          "Next visited places:", total_next_visited_places,
          "Included places already visited:", total_included_visited_places,
          "Next total:")
    print("Next total:         :", next_total,
          '(', total_already_visited_places,
          '+', total_next_visited_places,
          '-', total_included_visited_places,
          ')')

    getpass(LINE_UP)
    for _ in range(height):
        print(LINE_UP, end=LINE_CLEAR)
    print(LINE_UP, end=LINE_CLEAR)
    print(LINE_UP, end=LINE_CLEAR)
    print(LINE_UP, end=LINE_CLEAR)
    print(LINE_UP, end=LINE_CLEAR)
    print(LINE_UP, end=LINE_CLEAR)
    print('', end='')


def get_guard_next_status(guard_direction: str,
                          obstacle_position: tuple[int, int, str]):
    match guard_direction:
        case 'v':
            return (obstacle_position[0] - 1, obstacle_position[1],), '<'
        case '<':
            return (obstacle_position[0], obstacle_position[1] + 1,), '^'
        case '>':
            return (obstacle_position[0], obstacle_position[1] - 1,), 'v'
        case '^':
            return (obstacle_position[0] + 1, obstacle_position[1],), '>'


def get_next_visited_places(
        guard_position: tuple[int, int], guard_direction: str,
        next_obstacle_position: tuple[int, int, str] | None):
    match guard_direction:
        case 'v':
            x = guard_position[1]
            limit = (next_obstacle_position[0]
                     if next_obstacle_position is not None
                     else len(input_grid))
            return [(y, x,) for y in range(guard_position[0], limit)]
        case '<':
            y = guard_position[0]
            limit = (next_obstacle_position[1]
                     if next_obstacle_position is not None
                     else -1)
            return [(y, x,) for x in range(guard_position[1], limit, -1)]
        case '>':
            y = guard_position[0]
            limit = (next_obstacle_position[1]
                     if next_obstacle_position is not None
                     else len(input_grid[y]))
            return [(y, x,) for x in range(guard_position[1], limit)]
        case '^':
            x = guard_position[1]
            limit = (next_obstacle_position[0]
                     if next_obstacle_position is not None
                     else -1)
            return [(y, x,) for y in range(guard_position[0], limit, -1)]


def get_next_obstacle(
        guard_position: tuple[int, int], guard_direction: str,
        additional_obstacle: tuple[int, int] | None = None
        ) -> tuple[int, int, str] | None:
    all_obstacles = ([*obstacle_positions, additional_obstacle]
                     if additional_obstacle is not None
                     else obstacle_positions)
    next_obstacles = sorted(
        filter(get_obstacle_filter(guard_position, guard_direction),
               all_obstacles),
        key=(lambda o: o[0]
             if guard_direction in ['v', '^']
             else o[1]))
    if len(next_obstacles) == 0:
        return None

    next_obstacle = (next_obstacles[0]
                     if guard_direction in ['>', 'v']
                     else next_obstacles[-1])
    return (*next_obstacle, guard_direction,)


def get_obstacle_filter(guard_position: tuple[int, int],
                        guard_direction: str):
    match guard_direction:
        case 'v':
            return lambda o: (o[1] == guard_position[1]
                              and o[0] > guard_position[0])
        case '<':
            return lambda o: (o[0] == guard_position[0]
                              and o[1] < guard_position[1])
        case '>':
            return lambda o: (o[0] == guard_position[0]
                              and o[1] > guard_position[1])
        case '^':
            return lambda o: (o[1] == guard_position[1]
                              and o[0] < guard_position[0])


#
# --- Part One ---
#
def part_one():
    visited_positions = set()
    guard_position, guard_direction = get_guard_initial_status()

    while True:
        next_obstacle = get_next_obstacle(guard_position, guard_direction)
        next_visited_places = get_next_visited_places(guard_position,
                                                      guard_direction,
                                                      next_obstacle)
        visited_positions.update(next_visited_places)
        if next_obstacle is None:
            break
        guard_position, guard_direction = get_guard_next_status(
            guard_direction, next_obstacle)

    return len(visited_positions)


print("Count of the visited positions:", part_one())


#
# --- Part Two ---
#
def get_new_obstacle_possible_positions(
        guard_direction: str,
        next_visited_places: list[tuple[int, int]],
        already_visited_positions: set[tuple[int, int]],
        already_visited_obstacles: set[tuple[int, int, str]]
        ) -> set[tuple[int, int]]:

    new_obstacles = set()
    match guard_direction:
        case 'v':
            for place in next_visited_places[:-1]:
                new_obstacle = (place[0] + 1, place[1],)
                if (new_obstacle in already_visited_positions
                        or new_obstacle[0] >= len(input_grid)
                        or new_obstacle in obstacle_positions):
                    continue
                if is_leading_to_known_obstacle(
                        place, '<',
                        {*already_visited_obstacles,
                         (*new_obstacle,  guard_direction,)},
                        new_obstacle):
                    new_obstacles.add(new_obstacle)
        case '<':
            for place in next_visited_places[:-1]:
                new_obstacle = (place[0], place[1] - 1,)
                if (new_obstacle in already_visited_positions
                        or new_obstacle[1] < 0
                        or new_obstacle in obstacle_positions):
                    continue
                if is_leading_to_known_obstacle(
                        place, '^',
                        {*already_visited_obstacles,
                         (*new_obstacle,  guard_direction,)},
                        new_obstacle):
                    new_obstacles.add(new_obstacle)
        case '>':
            for place in next_visited_places[:-1]:
                new_obstacle = (place[0], place[1] + 1,)
                if (new_obstacle in already_visited_positions
                        or new_obstacle[1] >= len(input_grid[place[0]])
                        or new_obstacle in obstacle_positions):
                    continue
                if is_leading_to_known_obstacle(
                        place, 'v',
                        {*already_visited_obstacles,
                         (*new_obstacle,  guard_direction,)},
                        new_obstacle):
                    new_obstacles.add(new_obstacle)
        case '^':
            for place in next_visited_places[:-1]:
                new_obstacle = (place[0] - 1, place[1],)
                if (new_obstacle in already_visited_positions
                        or new_obstacle[0] < 0
                        or new_obstacle in obstacle_positions):
                    continue
                if is_leading_to_known_obstacle(
                        place, '>',
                        {*already_visited_obstacles,
                         (*new_obstacle,  guard_direction,)},
                        new_obstacle):
                    new_obstacles.add(new_obstacle)

    return new_obstacles


def is_leading_to_known_obstacle(
        start_pos: tuple[int, int], direction: str,
        visited_obstacles: set[tuple[int, int, str]],
        additional_obstacle: tuple[int, int]):
    next_obstacle = get_next_obstacle(start_pos,
                                      direction,
                                      additional_obstacle)

    if next_obstacle is None:
        return False
    if next_obstacle in visited_obstacles:
        return True

    next_start_pos, next_direction = get_guard_next_status(direction,
                                                           next_obstacle)
    return is_leading_to_known_obstacle(next_start_pos, next_direction,
                                        {*visited_obstacles, next_obstacle},
                                        additional_obstacle)


def part_two():
    visited_positions = set()
    visited_obstacles = set()
    new_obstacle_possibilities = set()
    guard_position, guard_direction = get_guard_initial_status()

    while True:
        next_obstacle = get_next_obstacle(guard_position, guard_direction)
        next_visited_places = get_next_visited_places(guard_position,
                                                      guard_direction,
                                                      next_obstacle)
        new_obstacle_possibilities.update(
            get_new_obstacle_possible_positions(guard_direction,
                                                next_visited_places,
                                                visited_positions,
                                                visited_obstacles))
        visited_positions.update(next_visited_places)
        visited_obstacles.add(next_obstacle)
        if next_obstacle is None:
            break
        guard_position, guard_direction = get_guard_next_status(
            guard_direction, next_obstacle)

    return len(new_obstacle_possibilities)


print("Number of possible new obstacles:", part_two())
